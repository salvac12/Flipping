generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuario del sistema
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  favorites     UserFavorite[]
  searchCriteria SearchCriteria[]
}

// Para NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Propiedad scrapeada
model Property {
  id          String   @id @default(cuid())
  url         String   @unique
  portal      Portal   @default(IDEALISTA)

  // Datos básicos
  title       String
  price       Float
  m2          Float
  pricePerM2  Float
  address     String
  zone        String
  city        String   @default("Madrid")

  // Coordenadas
  latitude    Float?
  longitude   Float?

  // Características
  rooms       Int?
  bathrooms   Int?
  floor       Int?
  isExterior  Boolean  @default(false)
  hasLift     Boolean  @default(false)
  buildYear   Int?

  // Estado y reforma
  condition   String?  // "para reformar", "buen estado", etc.
  needsReform Boolean  @default(false)

  // Scoring
  score       Float    @default(0)
  scoreDetails Json?   // Desglose del scoring

  // Imágenes y descripción
  images      String[]
  description String?

  // Metadatos
  status      PropertyStatus @default(ACTIVE)
  scrapedAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())

  // Relaciones
  history     PropertyHistory[]
  favorites   UserFavorite[]
}

// Historial de cambios de precio
model PropertyHistory {
  id          String   @id @default(cuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  price       Float
  pricePerM2  Float
  status      PropertyStatus

  createdAt   DateTime @default(now())

  @@index([propertyId])
}

// Favoritos de usuario
model UserFavorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  notes      String?
  rating     Int?     // 1-5
  decision   FavoriteDecision?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, propertyId])
  @@index([userId])
}

// Criterios de búsqueda configurables
model SearchCriteria {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String   // Nombre del criterio

  // Filtros de zona
  zones     String[] // ["GUINDALERA", "DELICIAS", etc.]

  // Filtros de precio y superficie
  minPrice  Float?
  maxPrice  Float?
  minM2     Float?
  maxM2     Float?
  maxPricePerM2 Float?

  // Filtros de características
  minRooms      Int?
  minBathrooms  Int?
  minFloor      Int?
  maxFloor      Int?
  exteriorOnly  Boolean @default(true)
  needsReform   Boolean @default(true)

  // Filtros de edificio
  minBuildYear  Int?
  maxBuildYear  Int?

  // Scoring mínimo
  minScore      Float?

  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}

// Enums
enum Portal {
  IDEALISTA
  FOTOCASA
  PISOS_COM
}

enum PropertyStatus {
  ACTIVE      // Disponible
  SOLD        // Vendida
  REMOVED     // Retirada del mercado
  ARCHIVED    // Archivada (muy antigua)
}

enum FavoriteDecision {
  INTERESTED      // Interesado
  VISIT_SCHEDULED // Visita programada
  DISCARDED       // Descartada
  OFFER_MADE      // Oferta realizada
  PURCHASED       // Comprada
}
